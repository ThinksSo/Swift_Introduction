/* Задачи:
 1. Написать функцию, которая будет решать квадратное уравнение.
 На вход функция получает коэффициенты a, b, c, d (ax^2 + bx+ c = d), а возвращает корни уравнения.
 2. Создать перечисление с видами чая (black, fruit, green), далее создать структуру,
 в которой будет хранится вид чая и его стоимость.
 3. Создать класс Cafe, в котором хранится массив с чаем.
 Переменная с массивом должна быть приватной.
 Значение в массив должно устанавливаться в инициализаторе
 4. Добавить в структуру чая функцию getCost, которая будет возвращать стоимость чая.
 На вход функция принимает процент скидки (только целое число),
 который необходимо применить к стоимости.  Если скидка больше 50% напечатать в консоль
 о невозможности применить скидку и вернуть изначальную стоимость чая.
 5. Добавить в класс функцию, которая на вход принимает тип чая и скидку,
 которую нужно применить. Функция должна вернуть стоимость,
 которую должен заплатить покупатель. Если данного вида чая нет в массиве(меню) - вернуть nil.
 */


print("\n\t Task 1: Squere\n")
func quadratic (a: Int, b: Int, c: Int, d: Int) -> (Double?, Double?) {
    
    return x
}


// Задачи:
// 1.    Сделать тип чая вложенным типом для структуры чая.

struct Tea {

   }
   
   
   var type: TeaType
   var price: Double
}

var t = Tea()

//2.    Сделать так, чтобы в структуре чая можно было получить
//стоимость только через функцию getCost,
//то есть чтобы извне функции не было доступа к переменной со стоимостью чая.
struct Tea {
    
    
    private var type: TeaType
    private var cost: Double
    
    init(cost: Double, type: TeaType) {
        self.cost = cost
        self.type = type
    }
    
    func getCost(type: TeaType) -> Double? {
       quard type != nil else {                 // Как проверить наличие экземпляра?
           print("No such type of tea - \(TeaType)")
           return nil                          // Что возвращать? Это не Double...
       }
       return cost!
   }
}
